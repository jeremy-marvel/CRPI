/**
*\file ld_comm_client.h

*\brief Interface for managing ARCL connections to the Omron Adept ld mobile robot platform. \n
*Note that this connection is one of two ways to communicate with the ld. Here the control \n
*program connects to the vehicle as a client.\n
*References:\n
*Based on agv_comm.h by J. Marvel, S. Legowik \n
*"_ftime, _ftime32, _ftime64 from MSDN" https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/ftime-ftime32-ftime64 \n

*\author Omar Aboul-Enein
*\date	2018-06-14
*/
#ifndef LD_COMM_CLIENT_H
#define LD_COMM_CLIENT_H
#include "ulapi.h"
#include "ld_msg.h"
#include <fstream>

class ld_comm_client
{
private:

	/**
	*\private
	*Descriptor for the ulapi socket
	*/
	ulapi_integer id;

	/**
	*\private
	*Port number of the ARCL server
	*/
	ulapi_integer port;

	/**
	*\private
	*IP address of the ARCL server
	*/
	char* ip_addr;

	/**
	*\private
	*Password needed to access the ARCL server
	*/
	char* passwd;

	/**
	*\private
	*Log file for recording data from ARCL command responses. Typically used to record pose or timestamps for messages.
	*/
	ofstream ld_log;

public:

//ctors and dtors:

	/**
	*\public
	*ld_comm_client
	*Constructor for ld_comm object.Creates log file for transmitted poses, initializes the \n
	*address of the ld ARCl server, and password for logging into the server \n
	*The values passed into this function are determined by the Adept ld Configuration Parameters. \n
	*These can be changed from the vehicle under Interface Options in Mobile Planner. \n
	*Then, when calling this constructor, the new parameters can be entered.
	*\param[in] arcl_addr IP address of the ld ARCL server
	*\param[in] arcl_port port number used when connecting to ARCL server
	*\param[in] arcl_passwd password given to the ARCL server to login.
	*\param[in] log boolean used to enable logging of ARCL data.
	*/
	ld_comm_client(char* arcl_addr, ulapi_integer arcl_port, char* arcl_passwd, bool log);

	/**
	*\public
	*Destructor. Safely closes the network connection to the ld.
	*/
	~ld_comm_client();

//Connection management:

	/**
	*\public
	*Connects to the ARCL server, sends the password login, and discards extra text sent back from the server.\n 
	*This function establishes the socket connection to the ld ARCL server. \n
	*This includes opening the client socket, sending the password to login to the ld, \n
	*and parsing extra input generated by the ARCL server. \n
	*/
	int ld_connect();

//Pose retrieval functions: 
//Poses are taken from the ARCL server DataStore and also includes various timestamps. There is one function for each type of DataStore Pose

	/**
	*\public
	*Sends multiple commands to get the current X, Y, and Theta pose of the vehicle,\n
	*plus another to get the timestamp. Parses the response and then groups \n
	*the data to store within a datastructure. Access pose and status \n
	*data within the ARCl DataStore. This not the best way to monitor the ld \n
	*as multiple commands issued in sequence are not guaranteed to return an atomic \n
	*response. \n
	*\param[out] pose datastructure to hold the pose and timestamp that is returned.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_dsfv_pose(ld_msg_pose* pose);

	/**
	*\public
	*Same as arcl_dsfv_pose, but uses a different ARCL command to access an alternate pose in the data store, see arcl_dsfv_pose. \n
	*Not currently used in performance test.
	*\param[out] pose	Datastructure to hold the pose and timestamp that is returned.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_dsfv_pose_encoder(ld_msg_pose* pose);

	/**
	*Same as arcl_dsfv_pose, but uses a different ARCL command to access an alternate pose in the data store, see arcl_dsfv_pose. \n
	*Not currently used in performance test.
	*\param[out] pose Datastructure to hold the pose and timestamp that is returned.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_dsfv_pose_interpolated(ld_msg_pose* pose);

	/**
	*Same as arcl_dsfv_pose, but uses a different ARCL command to access an alternate pose in the data store, see arcl_dsfv_pose. \n
	Not currently used in performance test.
	*\param[out] pose Datastructure to hold the pose and timestamp that is returned.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_dsfv_pose_encoder_interpolated(ld_msg_pose* pose);

	/**
	*Same as arcl_dsfv_pose, but uses a different ARCL command to access an alternate pose in the data store, see arcl_dsfv_pose. \n
	*Not currently used in performance test.
	*\param[out] pose Datastructure to hold the pose and timestamp that is returned.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_dsfv_pose_localization(ld_msg_pose* pose);

	/**
	*Same as arcl_dsfv_pose, but uses a different ARCL command to access an alternate pose in the data store, see arcl_dsfv_pose. \n
	*Not currently used in performance test.
	*\param[out] pose Datastructure to hold the pose and timestamp that is returned.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_dsfv_pose_laser_localization(ld_msg_pose* pose);

	/**
	*Same as arcl_dsfv_pose, but uses a different ARCL command to access an alternate pose in the data store, see arcl_dsfv_pose. \n
	*Not currently used in performance test.
	*\param[out] pose Datastructure to hold the pose and timestamp that is returned.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_dsfv_pose_light_localization(ld_msg_pose* pose);

//Other read and write functions:

	/**
	*This function is note currently used in performance test, but formed the basis of logic for \n
	*the similarly name function in ld_comm.cpp. \n
	*Repeatedly polls the ARCL server, waiting for a broadcast message that specifies the vehicle \n
	*has arrived at a goal point.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_read_status();

	/**
	*Reads responses from the ARCL server, returning responses line by line.
	*\param[out] arcl_recv_buf String pointer to hold the response recieved from the ARCL server.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_read(char **arcl_recv_buf); //Reads ARCL server messages delmited by newlines.

	/**
	*Sends arcl commands to the ARCL server using ULAPI sockets.
	*\param[in] arcl_cmd clear text command to be sent to the ARCL server.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	int arcl_write(char* arcl_cmd); //Sends a command to the ARCL server.

//Output and Logging:

	/**
	*Outputs the contents of a pose message to the console.
	*\param[in] msg ld_pose msg structure to be printed.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	void print_pose(ld_msg_pose* msg);


	/**
	*Outputs the contents of a pose message to a log file.
	*\param[in] msg Pose msg structure to be logged.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	void log_pose(ld_msg_pose* msg);

	/**
	*Enters additional comments into the log. Useful for adding headers to csv file.
	*\param[in] msg Message to be logged.
	*\return An integer indicating the error status of the function. A negative return value indicates a ulapi socket error.
	*/
	void log_comment(char* msg);

};//end ld_comm_client
#endif