&ACCESS RVP2
&REL 52
&PARAM TEMPLATE = C:\KRC\Roboter\Template\FunctionVorgabe
&PARAM EDITMASK = *
DEFFCT BOOL TEST_TERM()
  ;FOLD FUNCTION PARAMETER DECLARATIONS

  ;ENDFOLD
  ; -------------------------------------------------------
  ; AUTHOR:    JEREMY MARVEL
  ; SYSTEM:    KUKA ASSEMBLY PRIMITIVES
  ; SUBSYSTEM: HELPER FUNCTIONS
  ; FILE:      TEST_TERM.SRC
  ;
  ; EVALUATE THE DEFINED TERMINATION CONDITIONS
  ; Alarm clock:  Wait until a timer is above a set value
  ; Program time: Wait until a set program time has elapsed
  ; Ext. signal:  Wait for a signal on a specified input
  ; Contact:      Wait for exceeded force threshold  
  ; Distance:     Wait until robot has moved a set distance
  ; -------------------------------------------------------

  BOOL STATEVAL
  INT COUNTER
  REAL DX, DY, DZ, DP

  STATEVAL = FALSE

  FOR COUNTER = 1 to NUM_TERM_CONDITS
    SWITCH TERMINATORS[COUNTER].TTYPE
    CASE #ALARMCLOCK 
      TERMINATORS[COUNTER].RESULT_ = $TIMER[TERMINATORS[COUNTER].TIMER_NO_] >= TERMINATORS[COUNTER].END_TIME_
      IF TERMINATORS[COUNTER].RESULT_ THEN
        $TIMER_STOP[TERMINATORS[COUNTER].TIMER_NO_] = TRUE
      ENDIF
    CASE #PROGTIME
      DP = $TIMER[TERMINATORS[COUNTER].TIMER_NO_]
      DX = DP - TERMINATORS[COUNTER].LAST_VAL_
      TERMINATORS[COUNTER].CUR_TIME_ = TERMINATORS[COUNTER].CUR_TIME_ + DX
      TERMINATORS[COUNTER].LAST_VAL_ = DP
      TERMINATORS[COUNTER].RESULT_ = TERMINATORS[COUNTER].CUR_TIME_ >= TERMINATORS[COUNTER].END_TIME_
      IF TERMINATORS[COUNTER].RESULT_ THEN
        $TIMER_STOP[TERMINATORS[COUNTER].TIMER_NO_] = TRUE
      ENDIF
    CASE #EXTSIGNAL
      TERMINATORS[COUNTER].RESULT_ = $IN[TERMINATORS[COUNTER].DIGITAL_IN_]
    CASE #CONTACT
;      TERMINATORS[COUNTER].RESULT_ = ABS($TORQUE_TCP_EST.FT.X) >= TERMINATORS[COUNTER].THRESHOLD_
;      TERMINATORS[COUNTER].RESULT_ = TERMINATORS[COUNTER].RESULT_ OR (ABS($TORQUE_TCP_EST.FT.Y) >= TERMINATORS[COUNTER].THRESHOLD_)
      TERMINATORS[COUNTER].RESULT_ = TERMINATORS[COUNTER].RESULT_ OR (ABS($TORQUE_TCP_EST.FT.Z) >= TERMINATORS[COUNTER].THRESHOLD_)
;      TERMINATORS[COUNTER].RESULT_ = ABS(DP) >= TERMINATORS[COUNTER].THRESHOLD_
    CASE #DISTANCE
;       CURRENT_POS = $POS_ACT_MES
;      DX = ABS(TERMINATORS[COUNTER].ORIGIN_.X - $POS_ACT_MES.X)
;      DY = ABS(TERMINATORS[COUNTER].ORIGIN_.Y - $POS_ACT_MES.Y)
;      DZ = ABS(TERMINATORS[COUNTER].ORIGIN_.Z - $POS_ACT_MES.Z)
      DX = ABS(TERMINATORS[COUNTER].ORIGIN_.X - CURRENT_POS.X)
      DY = ABS(TERMINATORS[COUNTER].ORIGIN_.Y - CURRENT_POS.Y)
      DZ = ABS(TERMINATORS[COUNTER].ORIGIN_.Z - CURRENT_POS.Z)
;      DP = SQRT((DX * DX) + (DY * DY) + (DZ * DZ))
;      IF TERMINATORS[COUNTER].DELTA_X_ > 0.0 THEN
;        TERMINATORS[COUNTER].RESULT_ = TERMINATORS[COUNTER].DELTA_X_ <= DX
;      ENDIF
;      IF TERMINATORS[COUNTER].DELTA_Y_ > 0.0 THEN
;        TERMINATORS[COUNTER].RESULT_ = TERMINATORS[COUNTER].DELTA_Y_ <= DY
;      ENDIF
      IF TERMINATORS[COUNTER].DELTA_Z_ > 0.0 THEN
        TERMINATORS[COUNTER].RESULT_ = TERMINATORS[COUNTER].DELTA_Z_ <= DZ
      ENDIF
;      IF TERMINATORS[COUNTER].THRESHOLD_ > 0.0 THEN
;        TERMINATORS[COUNTER].RESULT_ = TERMINATORS[COUNTER].THRESHOLD_ <= DP
;      ENDIF
    CASE #NONE
      TERMINATORS[COUNTER].RESULT_ = FALSE
    ENDSWITCH
    STATEVAL = STATEVAL OR TERMINATORS[COUNTER].RESULT_
  ENDFOR

  RETURN(NOT STATEVAL)
ENDFCT