&ACCESS R
&COMMENT Collision Detection Library
DEF TM_BIB()
END 


GLOBAL DEF TQM_INI()

  CHECK_SUBMIT_RUNS()

  CHECK_VARSTATES()
 
  IF bTQM_UP_INIT THEN
    GLOBAL INTERRUPT DECL iTQM_INTERRUPT WHEN $CYCFLAG[iTQM_CYCFLAG] == TRUE DO TQM_INTER_STOP ()
    GLOBAL INTERRUPT DECL iTQM_INTERRUPT_OVPRO WHEN $OV_PRO <> iTQM_LAST_OVPRO DO TQM_CHANGE_OFFSETS ()

    FHOME.TQ_STATE = FALSE

    iCD_Step=0
    iTQM_ZEIGER = 1
    iTQM_ZEIGER_C = 1
    iTQM_DELAY = $FILTER/2 + 36 ;[ms]
    iTQM_Multiplier = $BRK_OPENTM + 4 ;[ms]
    iTQM_LAST_OVPRO = $OV_PRO

    bTQM_RINGMEM_INIT = TRUE
    bTQM_UP_INIT = FALSE
    bTQM_CYC = FALSE
    bTQM_Restart = FALSE 
    bTQM_STOP = FALSE

    SET_TQM_ACT(200)

    ;INTERRUPT ON iTQM_INTERRUPT
    INTERRUPT ON iTQM_INTERRUPT_OVPRO

    $CYCFLAG[iTQM_CYCFLAG] = FALSE

    $CYCFLAG[iTQM_CYCFLAG]=((($TORQ_DIFF[1]>TQM_ACT.T11) OR ($TORQ_DIFF[2]>TQM_ACT.T12) OR ($TORQ_DIFF[3]>TQM_ACT.T13) OR ($TORQ_DIFF[4]>TQM_ACT.T14) OR ($TORQ_DIFF[5]>TQM_ACT.T15) OR ($TORQ_DIFF[6]>TQM_ACT.T16) OR ($TORQ_DIFF2[1]>TQM_ACT.T21) OR ($TORQ_DIFF2[2]>TQM_ACT.T22) OR ($torq_diff2[3]>TQM_ACT.T23) OR ($TORQ_DIFF2[4]>TQM_ACT.T24) OR ($TORQ_DIFF2[5]>TQM_ACT.T25) OR ($TORQ_DIFF2[6]>TQM_ACT.T26)) AND bTQM_CYC AND bTQM_ACTIVE)
  ENDIF
END


GLOBAL DEF TQM_CHANGE_OFFSETS()

  REAL OV_FACTOR

  IF GetSysState("STOPBITS", iSTOP_TYPE, rPAR) THEN
    IF (iSTOP_TYPE <> 0) THEN
      RETURN
    ENDIF
  ENDIF

  INTERRUPT OFF iTQM_INTERRUPT_OVPRO
  
  IF CHECK_IVAR(TQM_TEMP.OVM) <> #INITIALIZED THEN
    TQM_DEACT_TORQUE1(1.25)
    TQM_DEACT_TORQUE2(1.5)
    iTQM_LAST_OVPRO = $OV_PRO
    INTERRUPT ON iTQM_INTERRUPT_OVPRO
    RETURN
  ELSE
    OV_FACTOR = ABS($OV_PRO-TQM_TEMP.OVM) * rTQM_OVM
    IF OV_FACTOR < 1.5 THEN
      OV_FACTOR = 1.5
    ENDIF
  ENDIF

  IF (TQM_TEMP.OVM > 0) AND (TQM_TEMP.ID <> 0) then
    IF $OV_PRO > (TQM_TEMP.OVM + 5) THEN
      
      TQM_DEACT_TORQUE1(1.25)
      TQM_DEACT_TORQUE2(OV_FACTOR)
      bTQM_OV_ONL = TRUE
    ELSE
      IF $OV_PRO < (TQM_TEMP.OVM - 5) THEN
        
        TQM_DEACT_TORQUE2(0.5*OV_FACTOR)
      ENDIF
    ENDIF
  ENDIF

  iTQM_LAST_OVPRO = $OV_PRO
  INTERRUPT ON iTQM_INTERRUPT_OVPRO

END


GLOBAL DEF TORQUE_MONITORING()

  DECL STATE_T STAT
  DECL MODUS_T MODE

  IF $ADAP_ACC == #NONE THEN
    
    bTQM_KCPSTATUS = FALSE
    bTQM_ACTIVE = FALSE
    RETURN
  ENDIF

  IF bTQM_CANCEL_PROG == TRUE THEN
    CWRITE($CMD, STAT, MODE, "CANCEL 1")
  ENDIF

  IF $PRO_STATE1 == #P_FREE THEN
    bTQM_CANCEL_PROG = FALSE
  ENDIF

  IF ($PRO_STATE1 == #P_FREE) OR ($PRO_STATE1 == #P_RESET) THEN
    bTQM_UP_INIT = TRUE
    TQM_TEMP.ID = 0
  ENDIF

  IF bTQM_START_PROG == TRUE THEN
    IF $PRO_STATE1 == #P_FREE THEN
      ;CWRITE($CMD, STAT, MODE,"RUN Example( )")
      bTQM_START_PROG = FALSE
    ENDIF
  ENDIF

  IF GetSysState("STOPBITS", iSTOP_TYPE, rPAR) THEN
    IF (iSTOP_TYPE <> 0) THEN
      bTQM_STOP = TRUE
    ENDIF
  ENDIF

  IF NOT ($PRO_MODE == #GO) OR ($MODE_OP == #T1) THEN
    
    bTQM_PMODE = FALSE
  ENDIF

  IF bTQM_ACTIVE THEN
    IF GetSysState("STOPBITS", iSTOP_TYPE, rPAR) THEN
      IF (iSTOP_TYPE <> 0) THEN
        bTQM_CYC = FALSE
        iCD_Step = 1
      ELSE
        IF ($PRO_STATE1 == #P_ACTIVE) AND $ON_PATH THEN
          SWITCH iCD_Step
            CASE 1
              bTQM_Restart = TRUE
              TQM_IPO_TIMER(iTQM_TI_RESTART, iTQM_TMR_FACTOR)
              TQM_IPO_TIMER(iTQM_TI_UPDATE, iTQM_TMR_FACTOR)
              iCD_Step = 2
            CASE 2
              IF ($TIMER[iTQM_TI_RESTART]>0) THEN
                iCD_Step = 0
                TORQ_DIFF_RESET()
                $TIMER_STOP[iTQM_TI_RESTART] = TRUE
                IF CHECK_IVAR(TQM_TEMP.ID) == #INITIALIZED THEN
                  IF (TQM_TEMP.ID <> 0) THEN        
                    ;TORQ_DIFF_RESET()
                    bTQM_CYC = TRUE
                  ENDIF
                ENDIF
              ENDIF
            DEFAULT
          ENDSWITCH
        ENDIF
      ENDIF
    ENDIF
  ENDIF

  IF ($MODE_OP == #EX) THEN
    IF (sTQM_SPSACTIVE) THEN
      sTQM_SPSSTATUS = TRUE
      IF (bTQM_KCPSTATUS) THEN
        bTQM_ACTIVE = TRUE
      ELSE
        bTQM_ACTIVE = FALSE
      ENDIF
    ELSE
      sTQM_SPSSTATUS = FALSE
      bTQM_ACTIVE = FALSE
    ENDIF 
  ELSE 
    IF (NOT bTQM_KCPSTATUS) THEN
      bTQM_ACTIVE = FALSE
    ELSE
      bTQM_ACTIVE = TRUE
    ENDIF
  ENDIF

END

DEF TQM_IPO_TIMER(INDEX: IN, VALUE: IN)
  INT INDEX, VALUE

  $TIMER_STOP[INDEX] = TRUE
  $TIMER[INDEX] = (-VALUE * iTQM_MULTIPLIER)
  $TIMER_STOP[INDEX] = FALSE
END 


GLOBAL DEF TQM_FIFO_READ (TQM_DATAS :IN)
  
  
  DECL TQM_TQDAT_T TQM_DATAS
  INT iTQM_REAR_ZEIGER
    
  
  
  TQM_DATA_C[iTQM_ZEIGER] = TQM_DATAS

  CONTINUE
  IF $ON_PATH THEN
    IF TQM_DATAS.ID == 0 THEN
      
      IF NOT bTQM_RINGMEM_INIT THEN
        iTQM_REAR_ZEIGER = iTQM_ZEIGER - 1
        IF iTQM_REAR_ZEIGER == 0 THEN
          iTQM_REAR_ZEIGER = 8
        ENDIF 

        IF TQM_DATA_C[iTQM_REAR_ZEIGER].ID == 0 THEN
        
          iTQM_ZEIGER = iTQM_ZEIGER - 1
          IF iTQM_ZEIGER == 0 THEN       
            iTQM_ZEIGER = 8             
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  ENDIF

  CONTINUE
  IF $ON_PATH THEN
    iTQM_ZEIGER = iTQM_ZEIGER + 1
    IF iTQM_ZEIGER == 9 THEN
      iTQM_ZEIGER = 1
    ENDIF
    IF $PRO_MODE == #MSTEP THEN
      iTQM_ZEIGER_C=iTQM_ZEIGER
      IF TQM_DATAS.ID == 0 THEN
         TQM_TEMP.ID=0
      ENDIF
    ENDIF
    bTQM_RINGMEM_INIT = FALSE
  ELSE
    bTQM_FIRST_AFTER_BCO = TRUE
    bTQM_TRIGGER_ON = TRUE
    bTQM_RINGMEM_INIT = TRUE
    bTQM_RINGMEM_INIT_C = TRUE
    iTQM_ZEIGER = 1
    iTQM_ZEIGER_C = 1
    TQM_TEMP.ID = 0
  ENDIF
END


GLOBAL DEF TQM_SWAP_VALUES(TQM_VALUES :OUT)
  

  DECL TQM_TQDAT_T TQM_VALUES

  INTERRUPT OFF iTQM_INTERRUPT

  bTQM_CYC = FALSE

  UPDATE_DATAS(TQM_VALUES)

  IF (($VW_PSPS_STOP B_AND 2) > 0) THEN
  
    RETURN
  ENDIF

  IF bTQM_FIRST_AFTER_BCO THEN
    bTQM_FIRST_AFTER_BCO = FALSE
    
    
    
  ENDIF

  IF bTQM_RESTART AND ($TIMER[iTQM_INTERRUPT] >= 0) then  
    IF $PRO_STATE1 == #P_ACTIVE THEN
      IF ($TIMER[iTQM_TI_UPDATE]>=0) THEN
        $TIMER_STOP[iTQM_TI_UPDATE]=TRUE
        
        bTQM_RESTART=FALSE
      ENDIF
    ENDIF
  ENDIF

  
  bTQM_COLLISION = FALSE                      

  
  IF bTQM_RINGMEM_INIT_C THEN                 
    IF TQM_DATA_C[iTQM_ZEIGER_C].ID == 0 THEN      
      
      iTQM_ZEIGER_C = iTQM_ZEIGER_C + 1            
      IF iTQM_ZEIGER_C == 9 THEN
        iTQM_ZEIGER_C = 1
      ENDIF
    ENDIF
    bTQM_RINGMEM_INIT_C = FALSE
  ENDIF

  iTQM_ZEIGER_C = iTQM_ZEIGER_C + 1                  
  
  IF iTQM_ZEIGER_C == 9 THEN
    iTQM_ZEIGER_C = 1
  ENDIF

  IF iTQM_ZEIGER == iTQM_ZEIGER_C THEN
    bTQM_ACTIVE = FALSE
    bTQM_TRIGGER_ENABLE = TRUE
    bTQM_TRIGGER_ON = TRUE
    TQM_TEMP.ID = 0
  ELSE
    
    IF TQM_DATA_C[iTQM_ZEIGER_C].ID == 0 THEN
      
      bTQM_TRIGGER_ENABLE = TRUE
      
      bTQM_TRIGGER_ON = TRUE
      iTQM_ZEIGER_C = iTQM_ZEIGER_C + 1               
      
      IF iTQM_ZEIGER_C == 9 THEN
        iTQM_ZEIGER_C = 1
      ENDIF
      TQM_TEMP.ID = 0
    ENDIF
  ENDIF
  
  
  IF IS_MSTEP_MOVE() THEN
    bTQM_TRIGGER_ON = TRUE
  ENDIF
  
  
  
  IF NOT bTQM_TRIGGER_ON AND ($PRO_MODE==#GO) THEN
    TQM_START_MON(TQM_DATA_C[iTQM_ZEIGER_C])
  ELSE
    IF (($VW_PSPS_STOP B_AND 2) > 0) THEN
      TQM_TEMP.ID = 0
    ENDIF
  ENDIF

END


DEF TQM_SWAP_VALUES_S(TQM_VALUES :OUT)

  DECL TQM_TQDAT_T TQM_VALUES

  IF (NOT bTQM_COLLISION AND NOT bTQM_FIRST_AFTER_BCO AND NOT bTQM_RESTART AND bTQM_PMODE) THEN

    
    
    UPDATE_TMVALUE(TQM_VALUES)

    IF bTQM_OV_ONL THEN
      bTQM_OV_ONL = FALSE
    ELSE
      TQM_VALUES.OVM = $OV_PRO
    ENDIF

    SCALE_TO_STANDARD(TQM_VALUES.TMF,rTQM_REDTMF)

  
  
  
  
  ENDIF

  STORE_MOT_TEMP(TQM_VALUES)

  bTQM_FIRST_AFTER_BCO = FALSE

  IF bTQM_RESTART AND ($TIMER[iTQM_INTERRUPT] >= 0) then  
    IF $PRO_STATE1 == #P_ACTIVE THEN
      IF ($TIMER[iTQM_TI_UPDATE]>=0) THEN
        $TIMER_STOP[iTQM_TI_UPDATE]=TRUE
        
        bTQM_RESTART=FALSE
      ENDIF
    ENDIF
  ENDIF

  
  bTQM_COLLISION = FALSE                      


  TQM_TEMP.ID = 0

END


GLOBAL DEF TQM_MON_ON( TQM_VALUES :OUT)
  DECL TQM_TQDAT_T TQM_VALUES

  
  TQM_TEMP =TQM_VALUES

  
  IF $ON_PATH AND ($TIMER[iTQM_TI_RESTART] >= 0) THEN
    
    IF $PRO_STATE1 == #P_ACTIVE THEN
      bTQM_CYC = TRUE
    ENDIF
  ENDIF

  IF ($PRO_MODE == #GO) AND ($MODE_OP <> #T1) THEN
    
    bTQM_PMODE = TRUE
  ENDIF
  
  IF NOT bTQM_ACTIVE OR NOT $ON_PATH THEN
    RETURN
  ENDIF

  MOT_FACTOR(TQM_VALUES)
  FILL_TQM_ACT(TQM_VALUES)
  TORQ_DIFF_RESET()

  CALL_INTERRUPT_ON(iTQM_INTERRUPT) 

END

GLOBAL DEF TQM_MON_OFF(TQM_VALUES :OUT)
  DECL TQM_TQDAT_T TQM_VALUES

  bTQM_CYC = FALSE

  IF GetSysState("STOPBITS", iSTOP_TYPE, rPAR) THEN
    IF (iSTOP_TYPE == 0) THEN
      TQM_SWAP_VALUES_S(TQM_VALUES)
    ENDIF
  ENDIF

  INTERRUPT OFF iTQM_INTERRUPT
  SET_TQM_ACT(200)
END

GLOBAL DEF TQM_START_MON(TQM_VALUES :OUT)
  

  DECL TQM_TQDAT_T TQM_VALUES

  TQM_TEMP = TQM_VALUES

  IF (NOT IS_MSTEP_MOVE()) AND ($TIMER[iTQM_TI_RESTART] >= 0) THEN
    
    bTQM_CYC = TRUE 
  ENDIF

  IF bTQM_STOP THEN
    bTQM_STOP = FALSE
  ENDIF

  IF ($PRO_MODE == #GO) AND ($MODE_OP <> #T1) THEN
    
    bTQM_PMODE = TRUE
  ELSE
    bTQM_PMODE = FALSE
  ENDIF

  IF iTQM_TRIGGERID <> TQM_VALUES.ID THEN
    ;TORQ_DIFF_RESET()
    
    RETURN
  ENDIF

  TORQ_DIFF_RESET()

  IF bTQM_TRIGGER_ENABLE THEN
    bTQM_TRIGGER_ENABLE=FALSE
    IF bTQM_TRIGGER_ON THEN
      
      IF IS_MSTEP_MOVE() THEN
        
        bTQM_TRIGGER_ON = TRUE
      ELSE
        bTQM_TRIGGER_ON = FALSE
      ENDIF
    ENDIF
  ELSE 
    bTQM_TRIGGER_ENABLE = TRUE
  ENDIF

  IF (bTQM_ACTIVE) AND (NOT IS_MSTEP_MOVE()) THEN
    
    MOT_FACTOR(TQM_VALUES)
    FILL_TQM_ACT(TQM_VALUES)
  ENDIF

  IF (NOT bTQM_ACTIVE OR (TQM_TEMP.ID == 0)) THEN
    SET_TQM_ACT(200)
  ENDIF

  ;TORQ_DIFF_RESET()

  IF (TQM_TEMP.ID <> 0) AND (NOT IS_MSTEP_MOVE())  THEN
    CALL_INTERRUPT_ON(iTQM_INTERRUPT)
  ENDIF

END

DEF FILL_TQM_ACT(TQM_VALUES:OUT) 

  REAL rTQ2 
  DECL TQM_TQDAT_T TQM_VALUES
  IF TQM_VALUES.OVM < $OV_PRO THEN
    TQM_VALUES.TMF = TQM_VALUES.TMF + (ABS($OV_PRO-TQM_VALUES.OVM) * rTQM_TMF)
    IF TQM_VALUES.TMF < 1.0 THEN
      TQM_VALUES.TMF = 1.0
    ENDIF
  ELSE 
    IF TQM_VALUES.OVM > $OV_PRO THEN
      IF TQM_VALUES.TMF < 1.5 THEN
        TQM_VALUES.TMF = 1.5
      ENDIF
    ENDIF
  ENDIF

  If (TQM_VALUES.TMF <> 1.0) THEN
    
    rTQ2 = 1.25
  ELSE
    rTQ2 = 1.0
  ENDIF

  TQM_ACT.T11 = TQM_VALUES.T11 + (TQM_VALUES.O1*TQM_VALUES.TMF*rTQM_MOT[1])
  TQM_ACT.T21 = (TQM_VALUES.T21 + TQM_VALUES.O2)*TQM_VALUES.TMF*rTQ2*rTQM_MOT[1]

  TQM_ACT.T12 = TQM_VALUES.T12 + (TQM_VALUES.O1*TQM_VALUES.TMF*rTQM_MOT[2])
  TQM_ACT.T22 = (TQM_VALUES.T22 + TQM_VALUES.O2)*TQM_VALUES.TMF*rTQ2*rTQM_MOT[2]

  TQM_ACT.T13 = TQM_VALUES.T13 + (TQM_VALUES.O1*TQM_VALUES.TMF*rTQM_MOT[3])
  TQM_ACT.T23 = (TQM_VALUES.T23 + TQM_VALUES.O2)*TQM_VALUES.TMF*rTQ2*rTQM_MOT[3]

  TQM_ACT.T14 = TQM_VALUES.T14 + (TQM_VALUES.O1*TQM_VALUES.TMF*rTQM_MOT[4])
  TQM_ACT.T24 = (TQM_VALUES.T24 + TQM_VALUES.O2*rTQM_T2H)*TQM_VALUES.TMF*rTQ2*rTQM_MOT[4]

  TQM_ACT.T15 = TQM_VALUES.T15 + (TQM_VALUES.O1*TQM_VALUES.TMF*rTQM_MOT[5])
  TQM_ACT.T25 = (TQM_VALUES.T25 + TQM_VALUES.O2*rTQM_T2H)*TQM_VALUES.TMF*rTQ2*rTQM_MOT[5]

  TQM_ACT.T16 = TQM_VALUES.T16 + (TQM_VALUES.O1*TQM_VALUES.TMF*rTQM_MOT[6])
  TQM_ACT.T26 = (TQM_VALUES.T26 + TQM_VALUES.O2*rTQM_T2H)*TQM_VALUES.TMF*rTQ2*rTQM_MOT[6]

  TQM_ACT.O1 = TQM_VALUES.O1
  TQM_ACT.O2 = TQM_VALUES.O2
  TQM_ACT.ID = TQM_VALUES.ID
END

GLOBAL DEF TQM_INTER_STOP()
  

  INT iTORQUES
  INT iIMPACTS
  BOOL bRESULT
  DECL STATE_T STATE
  DECL CHAR cTQM_TORQPARAM[20]
  DECL CHAR cTQM_IMPPARAM[20]

  iTORQUES = 0
  iIMPACTS = 0
  bRESULT = STRCLEAR(cTQM_TORQPARAM[])
  bRESULT = STRCLEAR(cTQM_IMPPARAM[])

  IF bTQM_CYC THEN
    INTERRUPT OFF iTQM_INTERRUPT
    bTQM_COLLISION = TRUE

    IF ($TORQ_DIFF[1] > TQM_ACT.T11) THEN
      iTORQUES = STRING_BUILDER(cTQM_TORQPARAM[], "A1")
    ENDIF

    IF ($TORQ_DIFF2[1] > TQM_ACT.T21) THEN
      iIMPACTS = STRING_BUILDER(cTQM_IMPPARAM[], "A1")
    ENDIF

    IF ($TORQ_DIFF[2] > TQM_ACT.T12) THEN
      iTORQUES = STRING_BUILDER(cTQM_TORQPARAM[], "A2")
    ENDIF
    IF ($TORQ_DIFF2[2] > TQM_ACT.T22) THEN
      iIMPACTS = STRING_BUILDER(cTQM_IMPPARAM[], "A2")
    ENDIF

    IF ($TORQ_DIFF[3] > TQM_ACT.T13) THEN
      iTORQUES = STRING_BUILDER(cTQM_TORQPARAM[], "A3")
    ENDIF
    IF ($TORQ_DIFF2[3] > TQM_ACT.T23) THEN
      iIMPACTS = STRING_BUILDER(cTQM_IMPPARAM[], "A3")
    ENDIF

    IF ($TORQ_DIFF[4] > TQM_ACT.T14) THEN
      iTORQUES = STRING_BUILDER(cTQM_TORQPARAM[], "A4")
    ENDIF
    IF ($TORQ_DIFF2[4] > TQM_ACT.T24) THEN
      iIMPACTS = STRING_BUILDER(cTQM_IMPPARAM[], "A4")
    ENDIF

    IF ($TORQ_DIFF[5] > TQM_ACT.T15) THEN
      iTORQUES = STRING_BUILDER(cTQM_TORQPARAM[], "A5")
    ENDIF
    IF ($TORQ_DIFF2[5] > TQM_ACT.T25) THEN
      iIMPACTS = STRING_BUILDER(cTQM_IMPPARAM[], "A5")
    ENDIF

    IF ($TORQ_DIFF[6] > TQM_ACT.T16) THEN
      iTORQUES = STRING_BUILDER(cTQM_TORQPARAM[], "A6")
    ENDIF
    IF ($TORQ_DIFF2[6] > TQM_ACT.T26) THEN
      iIMPACTS = STRING_BUILDER(cTQM_IMPPARAM[], "A6")
    ENDIF

    IF bTQM_CYC THEN
      IF ((iTORQUES > 0) OR (iIMPACTS > 0)) THEN
        IF (iTORQUES > 0) THEN
          ;SWRITER(cTQM_TORQPARAM[], TQM_ACT.ID)
          
          MSG_TQM({MODUL[] "TQM", NR 10, MSG_TXT[] "TorqueDetected"}, cTQM_TORQPARAM[])
        ENDIF
        IF (iIMPACTS > 0) THEN
          ;SWRITER(cTQM_IMPPARAM[], TQM_ACT.ID)
          
          MSG_TQM({MODUL[] "TQM", NR 11, MSG_TXT[] "ImpactDetected"}, cTQM_IMPPARAM[])
        ENDIF
        BRAKE F
        TM_USERACTION()
      ENDIF
    ELSE
      bTQM_COLLISION=FALSE
    ENDIF

    ;TORQ_DIFF_RESET()
    INTERRUPT ON iTQM_INTERRUPT

  ENDIF
END

DEF TORQ_DIFF_RESET()
  INT I
  FOR I = 1 TO 6          
    $TORQ_DIFF[I]=0
    $TORQ_DIFF2[I]=0
  ENDFOR
END

DEF STORE_MOT_TEMP(TQM_VALUES:OUT)

  DECL TQM_TQDAT_T TQM_VALUES

  TQM_VALUES.K1 = $MOT_TEMP[1] 
  TQM_VALUES.K2 = $MOT_TEMP[2] 
  TQM_VALUES.K3 = $MOT_TEMP[3] 
  TQM_VALUES.K4 = $MOT_TEMP[4] 
  TQM_VALUES.K5 = $MOT_TEMP[5] 
  TQM_VALUES.K6 = $MOT_TEMP[6] 
END

DEF MOT_FACTOR(TQM_VALUES:IN)

  DECL TQM_TQDAT_T TQM_VALUES
  
  IF $MOT_TEMP[1] < TQM_VALUES.K1 - 5 THEN
    rTQM_MOT[1] = rTQM_F_MOT
  ELSE
    SCALE_TO_STANDARD(rTQM_MOT[1],0.8)
  ENDIF

  IF $MOT_TEMP[2] < TQM_VALUES.K2 - 5 THEN
    rTQM_MOT[2] = rTQM_F_MOT
  ELSE
    SCALE_TO_STANDARD(rTQM_MOT[2],0.8)
  ENDIF

  IF $MOT_TEMP[3] < TQM_VALUES.K3 - 5 THEN
    rTQM_MOT[3] = rTQM_F_MOT
  ELSE
    SCALE_TO_STANDARD(rTQM_MOT[3],0.8)
  ENDIF

  IF $MOT_TEMP[4] < TQM_VALUES.K4 - 5 THEN
    rTQM_MOT[4] = rTQM_F_MOT
  ELSE
    SCALE_TO_STANDARD(rTQM_MOT[4],0.8)
  ENDIF

  IF $MOT_TEMP[5] < TQM_VALUES.K5 - 5 THEN
    rTQM_MOT[5] = rTQM_F_MOT
  ELSE
    SCALE_TO_STANDARD(rTQM_MOT[5],0.8)
  ENDIF

  IF $MOT_TEMP[6] < TQM_VALUES.K6 - 5 THEN
    rTQM_MOT[6] = rTQM_F_MOT
  ELSE
    SCALE_TO_STANDARD(rTQM_MOT[6],0.8)
  ENDIF
END

DEF SCALE_TO_STANDARD(VALUE:OUT,FACTOR:IN)

  REAL VALUE
  REAL FACTOR

  IF VALUE > 1.0 THEN  
    IF NOT IS_WARMUP() THEN
      VALUE = VALUE * FACTOR
      IF VALUE < 1.0 THEN
        VALUE = 1.0
      ENDIF
    ENDIF
  ENDIF
END

DEF SWRITER(STR_A[]:OUT, NUM:IN)
  INT nRET, OFFSET, NUM
  DECL CHAR STR_A[]
  DECL CHAR STR_B[8]
  DECL STATE_T STATE

  OFFSET = 0;STRLEN(STRING[])+1
  SWRITE(STR_B[], STATE, OFFSET, ":%s%d", "TM",NUM)
  nRET = STRADD(STR_A[],STR_B[])
END

DEFFCT INT STRING_BUILDER(STRING[]:OUT, AX_NAME[]:OUT)

  INT nRET
  DECL CHAR STRING[]
  DECL CHAR AX_NAME[]

  nRET = STRADD(STRING[],AX_NAME[])
  RETURN 1

ENDFCT

DEF TQM_DEACT_TORQUE1(FACT: IN)

  REAL FACT
  IF TQM_ACT.T11 < 200 THEN
    TQM_ACT.T11 = FACT*TQM_ACT.T11
  ELSE
    TQM_ACT.T11 = 200
  ENDIF
  IF TQM_ACT.T12 < 200 THEN
    TQM_ACT.T12 = FACT*TQM_ACT.T12
  ELSE
    TQM_ACT.T12 = 200
  ENDIF
  IF TQM_ACT.T13 < 200 THEN
    TQM_ACT.T13 = FACT*TQM_ACT.T13
  ELSE
    TQM_ACT.T13 = 200
  ENDIF
  IF TQM_ACT.T14 < 200 THEN
    TQM_ACT.T14 = FACT*TQM_ACT.T14
  ELSE
    TQM_ACT.T14 = 200
  ENDIF
  IF TQM_ACT.T15 < 200 THEN
    TQM_ACT.T15 = FACT*TQM_ACT.T15
  ELSE
    TQM_ACT.T15 = 200
  ENDIF
  IF TQM_ACT.T16 < 200 THEN
    TQM_ACT.T16 = FACT*TQM_ACT.T16
  ELSE
    TQM_ACT.T16 = 200
  ENDIF

END

DEF TQM_DEACT_TORQUE2(FACT: IN)

  REAL FACT
  IF (FACT*TQM_ACT.T21 < 1000) THEN
    TQM_ACT.T21 = FACT*TQM_ACT.T21
  ELSE
    TQM_ACT.T21 = 1000
  ENDIF
  IF (FACT*TQM_ACT.T22 < 1000) THEN
    TQM_ACT.T22 = FACT*TQM_ACT.T22
  ELSE
    TQM_ACT.T22 = 1000
  ENDIF
  IF (FACT*TQM_ACT.T23 < 1000) THEN
    TQM_ACT.T23 = FACT*TQM_ACT.T23
  ELSE
    TQM_ACT.T23 = 1000
  ENDIF
  IF (FACT*TQM_ACT.T24 < 1000) THEN
    TQM_ACT.T24 = FACT*TQM_ACT.T24
  ELSE
    TQM_ACT.T24 = 1000
  ENDIF
  IF (FACT*TQM_ACT.T25 < 1000) THEN
    TQM_ACT.T25 = FACT*TQM_ACT.T25
  ELSE
    TQM_ACT.T25 = 1000
  ENDIF
  IF (FACT*TQM_ACT.T26 < 1000) THEN
    TQM_ACT.T26 = FACT*TQM_ACT.T26
  ELSE
    TQM_ACT.T26 = 1000
  ENDIF

END

DEF SET_TQM_ACT(IVAL: IN)

  INT IVAL
  TQM_ACT.T11 = IVAL
  TQM_ACT.T12 = IVAL
  TQM_ACT.T13 = IVAL
  TQM_ACT.T14 = IVAL
  TQM_ACT.T15 = IVAL
  TQM_ACT.T16 = IVAL

  TQM_ACT.T21 = IVAL*5
  TQM_ACT.T22 = IVAL*5
  TQM_ACT.T23 = IVAL*5
  TQM_ACT.T24 = IVAL*5
  TQM_ACT.T25 = IVAL*5
  TQM_ACT.T26 = IVAL*5

END

DEF UPDATE_DATAS(TQM_VALUES:OUT)

  DECL TQM_TQDAT_T TQM_VALUES
  IF (NOT bTQM_COLLISION AND NOT bTQM_FIRST_AFTER_BCO AND NOT bTQM_RESTART AND NOT bTQM_STOP AND bTQM_PMODE) THEN
    IF NOT GetSysState("STOPBITS", iSTOP_TYPE, rPAR) THEN
    ENDIF
    IF (iSTOP_TYPE == 0) THEN
      
      
      UPDATE_TMVALUE(TQM_VALUES)

      IF bTQM_OV_ONL THEN
        bTQM_OV_ONL = FALSE
      ELSE
        TQM_VALUES.OVM = $OV_PRO
      ENDIF

      IF CHECK_RVAR(TQM_VALUES.TMF) <> #INITIALIZED THEN
        TQM_VALUES.TMF = 1.0
      ENDIF

      SCALE_TO_STANDARD(TQM_VALUES.TMF,rTQM_REDTMF)

    ENDIF

    IF iTQM_TRIGGERID == TQM_VALUES.ID THEN
      ;TORQ_DIFF_RESET()
    ENDIF

  ENDIF

  IF bTQM_STOP THEN
    bTQM_STOP = FALSE
    TQM_VALUES.T21=TQM_VALUES.T21 * 1.2
    TQM_VALUES.T22=TQM_VALUES.T22 * 1.2
    TQM_VALUES.T23=TQM_VALUES.T23 * 1.2
    TQM_VALUES.T24=TQM_VALUES.T24 * 1.2
    TQM_VALUES.T25=TQM_VALUES.T25 * 1.2
    TQM_VALUES.T26=TQM_VALUES.T26 * 1.2
  ENDIF

  STORE_MOT_TEMP(TQM_VALUES)

END

DEF UPDATE_TMVALUE(TQM_VALUES:OUT)

  DECL TQM_TQDAT_T TQM_VALUES

  TQM_VALUES.T11 = $TORQ_DIFF[1]
  TQM_VALUES.T12 = $TORQ_DIFF[2]
  TQM_VALUES.T13 = $TORQ_DIFF[3]
  TQM_VALUES.T14 = $TORQ_DIFF[4]
  TQM_VALUES.T15 = $TORQ_DIFF[5]
  TQM_VALUES.T16 = $TORQ_DIFF[6]

  IF $OV_PRO == TQM_VALUES.OVM THEN
    IF (TQM_VALUES.T21 < $TORQ_DIFF2[1]) THEN
      TQM_VALUES.T21 = $TORQ_DIFF2[1]
    ELSE
      TQM_VALUES.T21 = (TQM_VALUES.T21 + $TORQ_DIFF2[1])/2
    ENDIF

    IF (TQM_VALUES.T22 < $TORQ_DIFF2[2]) THEN
      TQM_VALUES.T22 = $TORQ_DIFF2[2]
    ELSE
      TQM_VALUES.T22 = (TQM_VALUES.T22 + $TORQ_DIFF2[2])/2
    ENDIF

    IF (TQM_VALUES.T23 < $TORQ_DIFF2[3]) THEN
      TQM_VALUES.T23 = $TORQ_DIFF2[3]
    ELSE
      TQM_VALUES.T23 = (TQM_VALUES.T23 + $TORQ_DIFF2[3])/2
    ENDIF

    IF (TQM_VALUES.T24 < $TORQ_DIFF2[4]) THEN
      TQM_VALUES.T24 = $TORQ_DIFF2[4]
    ELSE
      TQM_VALUES.T24 = (TQM_VALUES.T24 + $TORQ_DIFF2[4])/2
    ENDIF

    IF (TQM_VALUES.T25 < $TORQ_DIFF2[5]) THEN
      TQM_VALUES.T25 = $TORQ_DIFF2[5]
    ELSE
      TQM_VALUES.T25 = (TQM_VALUES.T25 + $TORQ_DIFF2[5])/2
    ENDIF

    IF (TQM_VALUES.T26 < $TORQ_DIFF2[6]) THEN
      TQM_VALUES.T26 = $TORQ_DIFF2[6]
    ELSE
      TQM_VALUES.T26 = (TQM_VALUES.T26 + $TORQ_DIFF2[6])/2
    ENDIF

    ;TQM_VALUES.T21 = (TQM_VALUES.T21 + $TORQ_DIFF2[1])/2
    ;TQM_VALUES.T22 = (TQM_VALUES.T22 + $TORQ_DIFF2[2])/2
    ;TQM_VALUES.T23 = (TQM_VALUES.T23 + $TORQ_DIFF2[3])/2
    ;TQM_VALUES.T24 = (TQM_VALUES.T24 + $TORQ_DIFF2[4])/2
    ;TQM_VALUES.T25 = (TQM_VALUES.T25 + $TORQ_DIFF2[5])/2
    ;TQM_VALUES.T26 = (TQM_VALUES.T26 + $TORQ_DIFF2[6])/2
  ELSE
    TQM_VALUES.T21 = $TORQ_DIFF2[1]
    TQM_VALUES.T22 = $TORQ_DIFF2[2]
    TQM_VALUES.T23 = $TORQ_DIFF2[3]
    TQM_VALUES.T24 = $TORQ_DIFF2[4]
    TQM_VALUES.T25 = $TORQ_DIFF2[5]
    TQM_VALUES.T26 = $TORQ_DIFF2[6]
  ENDIF

END

DEF CALL_INTERRUPT_ON(iNUM:IN)

  INT iNUM 
  
  ON_ERROR_PROCEED
  INTERRUPT ON iNUM
  SWITCH($ERR.NUMBER)
    CASE 0
      RETURN
    CASE 1430
      
      IF (iNUM == iTQM_INTERRUPT) THEN
        GLOBAL INTERRUPT DECL iNUM WHEN $CYCFLAG[iTQM_CYCFLAG] == TRUE DO TQM_INTER_STOP ()
      ELSE
        GLOBAL INTERRUPT DECL iNUM WHEN $OV_PRO <> iTQM_LAST_OVPRO DO TQM_CHANGE_OFFSETS ()
      ENDIF
      INTERRUPT ON iNUM
      ERR_CLEAR($ERR)
    DEFAULT
      ERR_RAISE($ERR)
  ENDSWITCH    

END


DEFFCT VAR_STATE CHECK_IVAR(iPARAM:OUT)

  INT iPARAM, iCheck

  ON_ERROR_PROCEED
  iCHECK = iPARAM
  SWITCH($ERR.NUMBER)
    CASE 0
      RETURN #INITIALIZED
    CASE 1422
      
      ERR_CLEAR($ERR)
    DEFAULT
      ERR_RAISE($ERR)
  ENDSWITCH
  RETURN #DECLARED

ENDFCT

DEFFCT VAR_STATE CHECK_RVAR(rPARAM:OUT)

  REAL rPARAM, rCheck

  ON_ERROR_PROCEED
  rCHECK = rPARAM
  SWITCH($ERR.NUMBER)
    CASE 0
      RETURN #INITIALIZED
    CASE 1422
      
      ERR_CLEAR($ERR)
    DEFAULT
      ERR_RAISE($ERR)
  ENDSWITCH
  RETURN #DECLARED

ENDFCT


DEFFCT VAR_STATE CHECK_SET_IVAR(iPARAM:OUT, iDEFAULT:IN)

  INT iPARAM, iDEFAULT, iCHECK

  ON_ERROR_PROCEED
  iCHECK = iPARAM
  SWITCH($ERR.NUMBER)
    CASE 0
      RETURN #INITIALIZED
    CASE 1422
      
      iParam = iDEFAULT
      ERR_CLEAR($ERR)
    DEFAULT
      ERR_RAISE($ERR)
  ENDSWITCH
  RETURN #DECLARED

ENDFCT


DEFFCT VAR_STATE CHECK_SET_RVAR(rPARAM:OUT, rDEFAULT:IN)

  REAL rPARAM, rDEFAULT, rCHECK

  ON_ERROR_PROCEED
  rCHECK = rPARAM
  SWITCH($ERR.NUMBER)
    CASE 0
      RETURN #INITIALIZED
    CASE 1422
      
      rPARAM = rDEFAULT
      ERR_CLEAR($ERR)
    DEFAULT
      ERR_RAISE($ERR)
  ENDSWITCH
  RETURN #DECLARED

ENDFCT

DEFFCT VAR_STATE CHECK_SET_BVAR(bPARAM:OUT, bDEFAULT:IN)

  BOOL bPARAM, bDEFAULT, bCHECK

  ON_ERROR_PROCEED
  bCHECK = bPARAM
  SWITCH($ERR.NUMBER)
    CASE 0
      RETURN #INITIALIZED
    CASE 1422
      
      bParam = bDEFAULT
      ERR_CLEAR($ERR)
    DEFAULT
      ERR_RAISE($ERR)
  ENDSWITCH
  RETURN #DECLARED

ENDFCT


DEF CHECK_VARSTATES()

  DECL VAR_STATE eRET

  eRET = CHECK_SET_BVAR(bTQM_FIRST_AFTER_BCO, FALSE)
  eRET = CHECK_SET_BVAR(bTQM_RINGMEM_INIT_C, FALSE)
  eRET = CHECK_SET_BVAR(bTQM_OV_ONL, FALSE)
  eRET = CHECK_SET_BVAR(bTQM_UP_INIT, TRUE)

END

GLOBAL DEFFCT INT TQM_DLY()

  
  RETURN ($FILTER/2 + 36)

ENDFCT

DEFFCT BOOL IS_MSTEP_MOVE()

  IF ($MODE_OP <> #EX) AND (($VW_PSPS_STOP B_AND 4) > 0) THEN
    
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF

ENDFCT

DEFFCT BOOL IS_WARMUP()

  IF ISMESSAGESET(375) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF

ENDFCT

DEF MSG_TQM(MSG:IN, PARAM[]:OUT)

  DECL KRLMSG_T MSG
  DECL KRLMSGPAR_T PAR[1]
  DECL KRLMSGOPT_T OPT  
  BOOL bRESULT
  CHAR PARAM[]
  INT  nHandle 

  
  PAR[1].PAR_TXT[]=" "
  bRESULT= STRCOPY(PAR[1].PAR_TXT[],PARAM[])
  PAR[1].PAR_TYPE=#Value
  OPT={VL_STOP TRUE, CLEAR_P_RESET TRUE, LOG_TO_DB TRUE}

  nHandle=SET_KRLMSG(#Notify,MSG,PAR[],OPT)

END


DEF CHECK_SUBMIT_RUNS()

  DECL KRLMSG_T MSG
  DECL KRLMSGPAR_T PAR[1]
  DECL KRLMSGOPT_T OPT
  INT nHandle 

  IF NOT bTQM_SubICheck THEN
    RETURN
  ENDIF

  MSG={MODUL[] "TQM", NR 12, MSG_TXT[] "SubmitNotActive"}
  OPT={VL_STOP TRUE, CLEAR_P_RESET TRUE, LOG_TO_DB FALSE}

  WHILE $PRO_STATE0 <> #P_ACTIVE 
    nHandle=SET_KRLMSG(#State,MSG,PAR[],OPT)
    IF nHANDLE > 0 THEN
      WHILE $PRO_STATE0 <> #P_ACTIVE 
        WAIT SEC 0.06
      ENDWHILE
      WAIT FOR CLEAR_KRLMSG(nHandle)
    ELSE
      HALT
    ENDIF
  ENDWHILE
END